module;

import lib.ft4.auth;
import lib.ft4.core.accounts.{ account, Account };

@extend(auth.auth_handler)
function () = auth.add_auth_handler(
    flags = ["T"]
);

// Entity to store tasks
entity task {
    key id: byte_array;
    key owner: account;
    mutable title: text;
    mutable description: text;
    mutable due_date: integer;
    mutable completed: boolean;
    created_at: integer = op_context.last_block_time;
}

// Operation to create a new task
operation create_task(
    title: text,
    description: text,
    due_date: integer
) {
    val owner = auth.authenticate();
    val task_id = (owner.id, title, op_context.last_block_time).hash();
    
    create task(
        id = task_id,
        owner = owner,
        title = title,
        description = description,
        due_date = due_date,
        completed = false
    );
}

// Operation to update a task
operation update_task(
    task_id: byte_array,
    title: text,
    description: text,
    due_date: integer
) {
    val owner = auth.authenticate();
    val task = task @ { .id == task_id, owner };
    
    task.title = title;
    task.description = description;
    task.due_date = due_date;
}

// Operation to toggle task completion
operation toggle_task(task_id: byte_array) {
    val owner = auth.authenticate();
    val task = task @ { .id == task_id, owner };
    task.completed = not task.completed;
}

// Operation to delete a task
operation delete_task(task_id: byte_array) {
    val owner = auth.authenticate();
    delete task @ { .id == task_id, owner };
}

// Query to get all tasks for a user
query get_tasks(account_id: byte_array) = {
    val acc = account @ { .id == account_id };
    return from task t 
           where t.owner == acc 
           order by t.created_at desc 
           select {
               id: t.id,
               title: t.title,
               description: t.description,
               due_date: t.due_date,
               completed: t.completed,
               created_at: t.created_at
           };
}

// Query to get filtered tasks (all, active, or completed)
query get_filtered_tasks(account_id: byte_array, completed: boolean?) = {
    val acc = account @ { .id == account_id };
    return from task t 
           where t.owner == acc and (completed == null or t.completed == completed)
           order by t.created_at desc 
           select {
               id: t.id,
               title: t.title,
               description: t.description,
               due_date: t.due_date,
               completed: t.completed,
               created_at: t.created_at
           };
}