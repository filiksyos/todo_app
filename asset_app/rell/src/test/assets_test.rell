function test_create_account_and_register_and_mint_asset() {
    val alice = rell.test.keypairs.alice;
    val trudy = rell.test.keypairs.trudy;

    val required_asset = (
        name = "TestAsset1",
        id = x"A85755C27F76B25C4139C929861E81C001C8C449F0260A9132F8ECFEA9075C39", //(asset_name, chain_context.blockchain_rid).hash();
        symbol = "TST1",
        decimals = 10,
        blockchain_rid = x"0000000000000000000000000000000000000000000000000000000000000000",
        icon_url = "https://url-to-asset-1-icon",
        type = "ft4",
        supply = 100L,
    );
    val auth_descriptor_alice = create_auth_descriptor(alice.pub, ["A", "T"], null.to_gtv());
    val auth_descriptor_trudy = create_auth_descriptor(trudy.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_open(auth_descriptor_alice))
        .op(register_account())
        
        .sign(alice)
        .run();
    rell.test.tx()
        .op(ras_open(auth_descriptor_trudy))
        .op(register_account()).sign(trudy)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(
            register_and_mint_asset(
                required_asset.name,
                required_asset.symbol,
                required_asset.decimals,
                required_asset.supply,
                required_asset.icon_url
            )
        )
        .sign(alice)
        .run();

    //query
    val asset_gtv = get_assets_by_name(required_asset.name, 10, null);
    assert_equals(asset_gtv.data[0], required_asset.to_gtv_pretty());

    val asset_data = asset_from_gtv(asset_gtv);

    val account_alice = account_from_gtv(get_accounts_by_signer(alice.pub, 10, null));
    val account_trudy = account_from_gtv(get_accounts_by_signer(trudy.pub, 10, null));

    val balance_alice = get_asset_balance(account_alice.id, asset_data.id);
    assert_equals(balance_alice?.amount, required_asset.supply);
}

function test_create_account_and_register_and_mint_2_assets_must_fail() {
    val alice = rell.test.keypairs.alice;
    val trudy = rell.test.keypairs.trudy;
    val required_asset_1 = (
        name = "TestAsset1",
        symbol = "TST1",
        decimals = 10,
        icon_url = "https://url-to-asset-1-icon",
        type = "ft4",
        supply = 100L,
    );
    val required_asset_2 = (
        name = "TestAsset2",
        symbol = "TST2",
        decimals = 10,
        icon_url = "https://url-to-asset-1-icon",
        type = "ft4",
        supply = 100L,
    );
    val auth_descriptor_alice = create_auth_descriptor(alice.pub, ["A", "T"], null.to_gtv());
    val auth_descriptor_trudy = create_auth_descriptor(trudy.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_open(auth_descriptor_alice))
        .op(register_account()).sign(alice)
        .run();
    rell.test.tx()
        .op(ras_open(auth_descriptor_trudy))
        .op(register_account()).sign(trudy)
        .run();
    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(
            register_and_mint_asset(
                required_asset_1.name,
                required_asset_1.symbol,
                required_asset_1.decimals,
                required_asset_1.supply,
                required_asset_1.icon_url
            )
        ).sign(alice)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(
            register_and_mint_asset(
                required_asset_2.name,
                required_asset_2.symbol,
                required_asset_2.decimals,
                required_asset_2.supply,
                required_asset_2.icon_url
            )
        ).sign(alice)
        .run_must_fail();
}

function test_create_account_and_register_and_mint_and_transfer_asset() {
    val alice = rell.test.keypairs.alice;
    val trudy = rell.test.keypairs.trudy;
    val asset_name = "TestAsset1";
    val asset_amount = 100;
    val asset_amount_to_transfer = 20;

    val required_asset = (
        name = "TestAsset1",
        symbol = "TST1",
        decimals = 10,
        icon_url = "https://url-to-asset-1-icon",
        type = "ft4",
        supply = 100L,
    );

    val auth_descriptor = create_auth_descriptor(alice.pub, ["A", "T"], null.to_gtv());
    val auth_descriptor_trudy = create_auth_descriptor(trudy.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_open(auth_descriptor))
        .op(register_account()).sign(alice)
        .run();
    rell.test.tx()
        .op(ras_open(auth_descriptor_trudy))
        .op(register_account()).sign(trudy)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(
            register_and_mint_asset(
                required_asset.name,
                required_asset.symbol,
                required_asset.decimals,
                required_asset.supply,
                required_asset.icon_url
            )
        ).sign(alice)
        .run();

    //query
    val asset_data = asset_from_gtv(get_assets_by_name(required_asset.name, 10, null));

    val account_alice = account_from_gtv(get_accounts_by_signer(alice.pub, 10, null));
    val account_trudy = account_from_gtv(get_accounts_by_signer(trudy.pub, 10, null));

    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(transfer(account_trudy.id, asset_data.id, asset_amount_to_transfer)).sign(alice)
        .run();

    val alice_balance = get_asset_balance(account_alice.id, asset_data.id);
    assert_equals(alice_balance?.amount, asset_amount - asset_amount_to_transfer);

    val trudy_balance = get_asset_balance(account_trudy.id, asset_data.id);
    assert_equals(trudy_balance?.amount, asset_amount_to_transfer);
}

function test_create_account_and_register_and_mint_and_stake_asset() {
    val alice = rell.test.keypairs.alice;
    val asset_name = "TestAsset1";
    val asset_amount = 100;
    val stake_amount = 50;
    val unstake_amount = 20;

    val required_asset = (
        name = "TestAsset1",
        symbol = "TST1",
        decimals = 10,
        icon_url = "https://url-to-asset-1-icon",
        type = "ft4",
        supply = 100L,
    );

    val auth_descriptor = create_auth_descriptor(alice.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_open(auth_descriptor))
        .op(register_account()).sign(alice)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(
            register_and_mint_asset(
                required_asset.name,
                required_asset.symbol,
                required_asset.decimals,
                required_asset.supply,
                required_asset.icon_url
            )
        ).sign(alice)
        .run();

    val asset_data = asset_from_gtv(get_assets_by_name(required_asset.name, 10, null));
    val account_alice = account_from_gtv(get_accounts_by_signer(alice.pub, 10, null));

    // Stake tokens
    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(stake_asset(asset_data.id, stake_amount))
        .sign(alice)
        .run();

    // Check balance after staking
    val alice_balance = get_asset_balance(account_alice.id, asset_data.id);
    assert_equals(alice_balance?.amount, asset_amount - stake_amount);

    // Check stake info
    val stake_info = get_stake_info(account_alice.id, asset_data.id);
    assert_equals(stake_info.amount, stake_amount);

    // Try to unstake more than staked (should fail)
    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(unstake_asset(asset_data.id, stake_amount + 1))
        .sign(alice)
        .run_must_fail();

    // Unstake valid amount
    rell.test.tx()
        .op(ft_auth_operation_for(alice.pub))
        .op(unstake_asset(asset_data.id, unstake_amount))
        .sign(alice)
        .run();

    // Check updated stake info
    val updated_stake_info = get_stake_info(account_alice.id, asset_data.id);
    assert_equals(updated_stake_info.amount, stake_amount - unstake_amount);

    // Check unstake request was created
    val unstake_info = get_unstake_info(account_alice.id, asset_data.id);
    assert_equals(unstake_info.amount, unstake_amount);
}
